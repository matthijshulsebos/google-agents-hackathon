# Copy this file to .env and replace placeholders with your values
#
# This app auto-creates Discovery Engine (Vertex AI Search) resources at startup/indexing
# under default_collection/global for each domain (nursing, pharmacy, po):
#   - Data Stores: nursing-data-store, pharmacy-data-store, po-data-store
#   - Serving Config: default_serving_config per data store
# Do NOT set DATA_STORE or SERVING_CONFIG env vars.
#
# You MUST provide Application Default Credentials (ADC) when running locally/Docker
# so the app can create resources and query Search. Choose ONE of the options below
# in the "Credentials (pick ONE)" section. Detailed steps are included inline.
#
# Optional: VERTEX_LOCATION is typically global for Discovery Engine.

# ---------------------
# Core
# ---------------------
GOOGLE_CLOUD_PROJECT=your-project-id            # gcloud config get-value project
REGION=europe-west1                             # valid examples: us-central1, us-east1, europe-west1 (NOT "eu-west")
GENAI_MODEL=gemini-1.5-flash-002
#VERTEX_LOCATION=global

# ---------------------
# Buckets
# ---------------------
# Option A: Single bucket for all domains (names only — no gs:// prefix)
#BUCKET=your-shared-bucket
# Option B: Per-domain buckets
NURSING_BUCKET=your-nursing-bucket
PHARMACY_BUCKET=your-pharmacy-bucket
PO_BUCKET=your-po-bucket
# Legacy aliases (optional, backward-compat):
#FINANCE_BUCKET=your-nursing-bucket
#LEGAL_BUCKET=your-pharmacy-bucket
#HEALTHCARE_BUCKET=your-po-bucket

# ---------------------
# Credentials (pick ONE)
# ---------------------
# Option A — Service Account key file (recommended for Docker/local):
# 1) Create a service account and key, and grant roles:
#    gcloud iam service-accounts create hospital-chat-sa \
#      --display-name="Hospital Chat Local"
#    gcloud projects add-iam-policy-binding $GOOGLE_CLOUD_PROJECT \
#      --member="serviceAccount:hospital-chat-sa@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com" \
#      --role="roles/discoveryengine.admin"
#    gcloud projects add-iam-policy-binding $GOOGLE_CLOUD_PROJECT \
#      --member="serviceAccount:hospital-chat-sa@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com" \
#      --role="roles/aiplatform.user"
#    gcloud projects add-iam-policy-binding $GOOGLE_CLOUD_PROJECT \
#      --member="serviceAccount:hospital-chat-sa@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com" \
#      --role="roles/storage.objectViewer"
# 2) Create a key file in the repo root:
#    gcloud iam service-accounts keys create sa-key.json \
#      --iam-account=hospital-chat-sa@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com
# 3) In docker-compose.yml, uncomment the mount and env:
#      volumes:
#        - ./sa-key.json:/tmp/key.json:ro
#      environment:
#        - GOOGLE_APPLICATION_CREDENTIALS=/tmp/key.json
# 4) Do NOT put GOOGLE_APPLICATION_CREDENTIALS here; set it in compose with the volume.
#
# Option B — Use host gcloud credentials inside the container:
# 1) On host: gcloud auth login && gcloud auth application-default login
# 2) In docker-compose.yml, mount the config directory:
#      volumes:
#        - ${HOME}/.config/gcloud:/root/.config/gcloud:ro
#
# Option C — Provide credentials via environment variables (useful for CI):
#   Only one of the two should be set; JSON takes precedence over BASE64.
#   Paste your service account key JSON directly:
#GOOGLE_APPLICATION_CREDENTIALS_JSON={"type":"service_account","project_id":"your-project-id","private_key_id":"...","private_key":"-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n","client_email":"hospital-chat-sa@your-project-id.iam.gserviceaccount.com","client_id":"...","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs","client_x509_cert_url":"https://www.googleapis.com/robot/v1/metadata/x509/hospital-chat-sa%40your-project-id.iam.gserviceaccount.com"}
#   Or provide it base64-encoded (create with: base64 -w0 sa-key.json > key.b64):
#GOOGLE_APPLICATION_CREDENTIALS_BASE64=eyJ0eXBlIjoic2VydmljZV9hY2NvdW50IiwiLi4uIn0=
#
# Enable required APIs once per project (outside of .env):
#   gcloud services enable discoveryengine.googleapis.com aiplatform.googleapis.com storage.googleapis.com

# ---------------------
# Retrieval + chunking
# ---------------------
TOP_K_PER_DOMAIN=6
MAX_SOURCES=6
CHUNK_TOKENS=800
CHUNK_OVERLAP=120
